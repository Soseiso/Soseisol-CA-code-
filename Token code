# Soseisol-CA-code-
use solana_program::{
    account_info::{next_account_info, AccountInfo},
    entrypoint,
    entrypoint::ProgramResult,
    msg,
    program_error::ProgramError,
    pubkey::Pubkey,
    spl_token::{self, instruction::TokenInstruction, state::Account},
};

entrypoint!(process_instruction);

pub fn process_instruction(
    _program_id: &Pubkey,
    accounts: &[AccountInfo],
    _instruction_data: &[u8],
) -> ProgramResult {
    msg!("Soseisol token program");

    let accounts_iter = &mut accounts.iter();
    let token_account = next_account_info(accounts_iter)?;

    // Set the total supply to 1 billion
    let total_supply = 1_000_000_000;

    // Update the token account data with the total supply
    let mut token_data = Account::unpack_unchecked(&token_account.data.borrow())?;
    token_data.amount = total_supply;
    Account::pack(token_data, &mut token_account.data.borrow_mut())?;

    // Set the token name
    let token_name = "Soseisol";
    let token_name_bytes = token_name.as_bytes();

    // Update the token account with the name
    for (i, byte) in token_name_bytes.iter().enumerate() {
        token_account.data.borrow_mut()[i] = *byte;
    }

    Ok(())
}Contract code info open source public zero taxes 1B Total supply no bullshit no dev first snip public to everyone 
